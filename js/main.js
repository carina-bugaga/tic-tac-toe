import getRandomNumber from './generateRandomNumber.mjs';
import saveLocalStorage from './saveLocalStorage.mjs';

//–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ DOM
const buttonsAll = document.querySelectorAll('button');

//–ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç body –∏–∑ DOM
const page = document.querySelector('.page');

//–ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –°—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ DOM
const pageStart = document.getElementById('page-start');
const buttonPlayers = document.getElementById('button-players');
const buttonEasyPC = document.getElementById('button-pc-easy');
const buttonHardPC = document.getElementById('button-pc-hard');
const titleMode = document.getElementById('title-mode');
const pageMode = document.getElementById('mode-page');

//–†–µ–∂–∏–º—ã –∏–≥—Ä—ã
const Modes = Object.freeze({
  TWOPLAYERS: 1,
  PCEASY: 2,
  PCHARD: 3
})
  
//–û–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏–≥—Ä—ã
let TicTacToe = {
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
   */
  init () {
    TicTacToe.symbols = ['X', 'O'];
    TicTacToe.squares = Array.from(document.querySelectorAll('.square'));
    TicTacToe.turnIndicator = document.querySelector('.turnIndicator');
    TicTacToe.buttonReset = document.getElementById('button-reset');
    TicTacToe.board = document.querySelector('.board');
    TicTacToe.mode;
    TicTacToe.winningSets = [
      //–í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      //–í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      //–í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
      [0, 4, 8],
      [2, 4, 6]
    ];
    TicTacToe.addEventListeners();
    if (localStorage.getItem('board') != null) {
      TicTacToe.continueGame();
    } else {
      TicTacToe.newGame();
    }
  },

  /**
   * –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
   */
  addEventListeners () {
    this.squares.forEach(square => square.addEventListener('click', () => {
        this.play(square);
    }));
    this.buttonReset.addEventListener('click', () => {
      this.clearLocalStorage();
      this.newGame();
    })
  },

  /**
   * –ù–æ–≤–∞—è –∏–≥—Ä–∞
   */
  newGame () {
    this.activePlayer = 0;
    this.gameOver = false;
    this.squares.forEach( el => {
      el.classList.remove('X');
      el.classList.remove('O');
    })
    this.board.classList.remove('gameOver');
    this.turnIndicator.innerHTML = '–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã';
  },
  
  /**
   * –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ LocalStorage
   */
  continueGame () {
    this.activePlayer = Number(localStorage.getItem('turn'));
    this.gameOver = false;
    JSON.parse(localStorage.getItem('board')).forEach((el, index) => {
      if (el == 'X') {
        this.squares[index].classList.add('X');
      } else if (el == 'O') {
        this.squares[index].classList.add('O');
      }
    })
    this.turnIndicator.innerHTML = `–•–æ–¥–∏—Ç –∏–≥—Ä–æ–∫ ${this.symbols[this.activePlayer]}`;
  },
  
  /**
   * –ü—Ä–æ—Ü–µ—Å—Å –∏–≥—Ä—ã
   * @param {HTMLElement} square –Ø—á–µ–π–∫–∞ –ø–æ–ª—è
   */
  play (square) {
    //–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ square –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ
    if (!this.gameOver && square.classList[1] == undefined) {
      //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –•-–û –≤ square –∏–≥—Ä–æ–∫–∞
      square.classList.add(this.symbols[this.activePlayer]);
      //–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
      if (this.checkWin()) {
        if (this.mode == Modes.TWOPLAYERS) {
          this.turnIndicator.innerHTML = `ü•á –£—Ä–∞, –≤—ã–∏–≥—Ä–∞–ª –∏–≥—Ä–æ–∫ ${this.symbols[this.activePlayer]}! ü•≥üéâ`;
        } else {
          if (this.activePlayer == 1) {
            this.turnIndicator.innerHTML = `üòµ‚Äçüí´ –£–≤—ã, –ø–æ–±–µ–¥–∏–ª –ü–ö! ü§ñ`;
          } else {
            this.turnIndicator.innerHTML = `ü•á –£—Ä–∞, —Ç—ã –ø–æ–±–µ–¥–∏–ª –ü–ö! ‚ú®ü•≥üéâ`;
          }
        }
        this.gameOverGame();
      } 
      //–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∏—á—å—é
      else if (this.checkDraw()) {
        this.turnIndicator.innerHTML = 'üò∫ –ù–∏—á—å—è! üò∫';
        this.gameOverGame();
      }
      //–ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
      else {
        this.activePlayer = 1 - this.activePlayer;
        this.setTurnIndicator();
        //–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, —Å–ª–æ–∂–Ω–æ—Å—Ç—å - –ª–µ–≥–∫–æ
        if (this.mode == Modes.PCEASY && this.activePlayer == 1) {
          this.randomMove();
        } 
        //–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, —Å–ª–æ–∂–Ω–æ—Å—Ç—å - —Å–ª–æ–∂–Ω–æ
        else if (this.mode == Modes.PCHARD && this.activePlayer == 1) {
          //–ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
          let indexToWinPC = this.getIndexToWinPC(this.symbols[this.activePlayer]);
          //–ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ö–æ–¥–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–±–µ–¥—ã –∏–≥—Ä–æ–∫–∞
          let indexToDeffendPC = this.getIndexToWinPC(this.symbols[0]);
          if (indexToWinPC != -1) {        
            this.play(this.squares[indexToWinPC]);
          } else if (indexToDeffendPC != -1) {
            this.play(this.squares[indexToDeffendPC]);
          }
          //–ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ –∏–ª–∏ –∑–∞—â–∏—Ç–Ω–æ–≥–æ —Ö–æ–¥–∞, —Ç–æ –ü–ö —Ö–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω–æ
          else {
            this.randomMove();
          }        
        }
        //–¢.–∫. —Ö–æ–¥ –ü–ö –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ, –ø–æ—ç—Ç–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–æ–≥–æ —Ö–æ–¥–∞ 
        //–Ω–∞ checkWin –∏ checkDraw (—ç—Ç–æ—Ç —Ö–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–º –≤–Ω—É—Ç—Ä–∏ —Ä–µ–∫—É—Ä—Å–∏–∏)
        if (!this.checkWin() && !this.checkDraw()) {
          let arrayBoard = this.squares.map(el => el.classList[1]);
          saveLocalStorage('board', arrayBoard);
          localStorage.setItem('turn', this.activePlayer);
          localStorage.setItem('mode', this.mode);   
        }       
      }
    }
  },
  
  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
   * @returns –ë—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º
   */
  checkWin () {
    return this.winningSets.some(set => {
      return set.every(index => {
        return Array.from(this.squares[index].classList).indexOf(this.symbols[this.activePlayer]) > -1;
      })
    })
  },
  
  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∏—á—å—é
   * @returns –ë—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Å–µ–≥–æ –ø–æ–ª—è
   */
  checkDraw () {
    return this.squares.every(el => {
      return el.classList.length > 1;
    })
  },
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ö–æ–¥–∞ –ü–ö
   */
  randomMove () {
    let arrayOfEmptySquares = this.squares.filter(el => el.classList.length == 1);
    let randomIndex = getRandomNumber(0, arrayOfEmptySquares.length - 1);
    this.play(arrayOfEmptySquares[randomIndex]);
  },

  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ö–æ–¥–∞ –ü–ö, –ø—É—Ç–µ–º –ø–µ—Ä–µ–±–æ—Ä–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π,
   * —Å –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ–º –≤ –Ω–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–∏ —Å 2 –∏–∑ 3 –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ 
   * @param {String} symbol –°–∏–º–≤–æ–ª —Ö–æ–¥–∞
   * @returns –ò–Ω–¥–µ–∫—Å –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è –¥–ª—è —Ö–æ–¥–∞
   */
  getIndexToWinPC (symbol) {
    let indexToWin = -1;

    this.winningSets.forEach(set => {
      let count = 0;
      let haveEmpty = false;
      let indexOfEmpty = -1;
      set.forEach(index => {
        if (this.squares[index].classList[1] == symbol) {
          count++;
        } else if (this.squares[index].classList[1] == undefined) {
          haveEmpty = true;
          indexOfEmpty = index;
        }
      })
      if (count == 2 && haveEmpty) {
        indexToWin = indexOfEmpty;
      }
    })
   return indexToWin;
  },
  
  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
   */
  gameOverGame () {
    this.gameOver = true;
    this.board.classList.add('gameOver');
    this.clearLocalStorage();
  },

  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —á–µ–π —Ö–æ–¥
   */
  setTurnIndicator () {
    this.turnIndicator.innerHTML = `–•–æ–¥–∏—Ç –∏–≥—Ä–æ–∫ ${this.symbols[this.activePlayer]}`;
  },

  /**
   * –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤
   */
  openTwoPlayers () {
    page.style.background = 'var(--green-dark)';
    pageMode.classList.remove('hidden');
    titleMode.innerHTML = '<img class="icon" src="./assets/img/two-players.svg" alt="two players"/> 2 –∏–≥—Ä–æ–∫–∞';
    this.mode = Modes.TWOPLAYERS;
    this.init();
  },

  /**
   * –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Ç–∏–≤ –ü–ö, —Å–ª–æ–∂–Ω–æ—Å—Ç—å - –ª–µ–≥–∫–æ
   */
  openEasyPC () {
    page.style.background = 'var(--pink)';
    pageMode.classList.remove('hidden');
    titleMode.innerHTML = '<img class="icon" src="./assets/img/computer.svg" alt="computer"/> –ü—Ä–æ—Ç–∏–≤ –ü–ö (–ª–µ–≥–∫–æ)';
    this.mode = Modes.PCEASY;
    this.init();
  },

  /**
   * –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Ç–∏–≤ –ü–ö, —Å–ª–æ–∂–Ω–æ—Å—Ç—å - —Å–ª–æ–∂–Ω–æ
   */
  openHardPC () {
    page.style.background = 'var(--blue-bg)';
    pageMode.classList.remove('hidden');
    titleMode.innerHTML = '<img class="icon" src="./assets/img/computer.svg" alt="computer"/> –ü—Ä–æ—Ç–∏–≤ –ü–ö (—Å–ª–æ–∂–Ω–æ)';
    this.mode = Modes.PCHARD;
    this.init();
  },

  /**
   * –û—á–∏—Å—Ç–∫–∞ LocalStorage
   */
  clearLocalStorage () {
    localStorage.removeItem('board');
    localStorage.removeItem('turn');
    localStorage.removeItem('mode');
  }
}

//–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ LocalStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  if (localStorage.getItem('board') != null) {
    pageStart.classList.add('hidden');
    if (localStorage.getItem('mode') == Modes.TWOPLAYERS) {
      TicTacToe.openTwoPlayers();
    } else if (localStorage.getItem('mode') == Modes.PCEASY) {
      TicTacToe.openEasyPC();
    } else {
      TicTacToe.openHardPC();
    }
  }
})

//–°–Ω–∏–º–∞–µ–º default —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
buttonsAll.forEach(btn => btn.addEventListener('click', event => event.preventDefault()));

//–°–∫—Ä—ã—Ç–∏–µ –°—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —Å —Ä–µ–∂–∏–º–∞–º–∏ –∏–≥—Ä
document.querySelectorAll('.button-start').forEach(btn => btn.addEventListener('click', () => {
  pageStart.classList.add('hidden-page');
}))

//–í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –°—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
document.getElementById('button-setting').addEventListener('click', () => {
  pageStart.classList.remove('hidden');
  pageStart.classList.remove('hidden-page');
})

//–ó–∞–ø—É—Å–∫ 1 –∏–∑ 3 –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–æ–≤ LocalStorage
buttonPlayers.addEventListener('click', () => {
  if (TicTacToe.mode != Modes.TWOPLAYERS) {
    TicTacToe.clearLocalStorage();
  }
  TicTacToe.openTwoPlayers();
})
buttonEasyPC.addEventListener('click', () => {
  if (TicTacToe.mode != Modes.PCEASY) {
    TicTacToe.clearLocalStorage();
  }
  TicTacToe.openEasyPC();
})
buttonHardPC.addEventListener('click', () => {
  if (TicTacToe.mode != Modes.PCHARD) {
    TicTacToe.clearLocalStorage();
  }
  TicTacToe.openHardPC();
})
